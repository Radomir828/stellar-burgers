import {
  addBun,
  addConstructorIngredient,
  removeConstructorIngredient,
  moveConstructorIngredient,
  burgerConstructorSlice
} from '../constructor';

const bun = {
  _id: '643d69a5c3f7b9001cfa093c',
  name: 'Краторная булка N-200i',
  type: 'bun',
  proteins: 80,
  fat: 24,
  carbohydrates: 53,
  calories: 420,
  price: 1255,
  image: 'https://code.s3.yandex.net/react/code/bun-02.png',
  image_mobile: 'https://code.s3.yandex.net/react/code/bun-02-mobile.png',
  image_large: 'https://code.s3.yandex.net/react/code/bun-02-large.png',
  __v: 0
};

const ingredient1 = {
  _id: '643d69a5c3f7b9001cfa0941',
  name: 'Биокотлета из марсианской Магнолии',
  type: 'main',
  proteins: 420,
  fat: 142,
  carbohydrates: 242,
  calories: 4242,
  price: 424,
  image: 'https://code.s3.yandex.net/react/code/meat-01.png',
  image_mobile: 'https://code.s3.yandex.net/react/code/meat-01-mobile.png',
  image_large: 'https://code.s3.yandex.net/react/code/meat-01-large.png',
  __v: 0
};

const ingredient2 = {
  _id: '643d69a5c3f7b9001cfa093f',
  name: 'Мясо бессмертных моллюсков Protostomia',
  type: 'main',
  proteins: 433,
  fat: 244,
  carbohydrates: 33,
  calories: 420,
  price: 1337,
  image: 'https://code.s3.yandex.net/react/code/meat-02.png',
  image_mobile: 'https://code.s3.yandex.net/react/code/meat-02-mobile.png',
  image_large: 'https://code.s3.yandex.net/react/code/meat-02-large.png',
  __v: 0
};

describe('burgerConstructorSlice reducer', () => {
  it('добавляет булку', () => {
    const initialState = burgerConstructorSlice.getInitialState();
    const nextState = burgerConstructorSlice.reducer(initialState, addBun(bun));
    expect(nextState.bun).toEqual(bun);
  });

  it('добавляет ингредиент', () => {
    const initialState = burgerConstructorSlice.getInitialState();
    const nextState = burgerConstructorSlice.reducer(
      initialState,
      addConstructorIngredient(ingredient1)
    );
    expect(nextState.ingredients).toHaveLength(1);
    expect(nextState.ingredients[0]).toMatchObject(ingredient1);
    expect(nextState.ingredients[0]).toHaveProperty('id'); // autogenerated nanoid
  });

  it('удаляет ингредиент по id', () => {
    const withIngredient = burgerConstructorSlice.reducer(
      burgerConstructorSlice.getInitialState(),
      addConstructorIngredient(ingredient1)
    );
    const idToRemove = withIngredient.ingredients[0].id;
    const resultState = burgerConstructorSlice.reducer(
      withIngredient,
      removeConstructorIngredient(idToRemove)
    );
    expect(resultState.ingredients).toHaveLength(0);
  });

  it('перемещает ингредиент вниз', () => {
    let state = burgerConstructorSlice.getInitialState();
    state = burgerConstructorSlice.reducer(
      state,
      addConstructorIngredient(ingredient1)
    );
    state = burgerConstructorSlice.reducer(
      state,
      addConstructorIngredient(ingredient2)
    );

    const firstId = state.ingredients[0].id;
    const secondId = state.ingredients[1].id;

    const result = burgerConstructorSlice.reducer(
      state,
      moveConstructorIngredient({ index: 0, type: 'down' })
    );

    expect(result.ingredients[0].id).toBe(secondId);
    expect(result.ingredients[1].id).toBe(firstId);
  });

  it('перемещает ингредиент вверх', () => {
    let state = burgerConstructorSlice.getInitialState();
    state = burgerConstructorSlice.reducer(
      state,
      addConstructorIngredient(ingredient1)
    );
    state = burgerConstructorSlice.reducer(
      state,
      addConstructorIngredient(ingredient2)
    );

    const firstId = state.ingredients[0].id;
    const secondId = state.ingredients[1].id;

    const result = burgerConstructorSlice.reducer(
      state,
      moveConstructorIngredient({ index: 1, type: 'up' })
    );

    expect(result.ingredients[0].id).toBe(secondId);
    expect(result.ingredients[1].id).toBe(firstId);
  });
});
